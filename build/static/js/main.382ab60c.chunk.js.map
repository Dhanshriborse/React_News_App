{"version":3,"sources":["components/SearchForm/SearchForm.js","components/CardImage/CardImage.js","components/CardText/CardText.js","components/CardContainer/CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","fetchNewsApiData","id","onSubmit","event","preventDefault","searchTerm","target","value","className","type","name","aria-label","placeholder","defaultValue","CardText","image","src","alt","title","description","publishedAt","url","Date","toLocaleDateString","href","rel","CardContainer","App","useState","newsArticles","setNewsArticles","searchQuery","alert","axios","get","process","newsData","data","articles","map","article","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":";4XAGe,SAASA,EAAT,GAA2C,IAArBC,EAAoB,EAApBA,iBAYjC,OACI,yBAAKC,GAAG,mBACJ,0BAAMA,GAAG,gBAAgBC,SARjC,SAAsBC,GAClBA,EAAMC,iBACN,IAAIC,EAAaF,EAAMG,OAAO,GAAGC,MACjCP,EAAiBK,KAMT,2BACIG,UAAU,cACVP,GAAG,YACHQ,KAAK,OACLC,KAAK,YACLC,aAAW,aACXC,YAAY,uBAEhB,2BACIX,GAAG,eACHU,aAAW,gBACXF,KAAK,SACLI,aAAa,a,MC3BlB,SAASC,EAAT,GAA8B,IAAVC,EAAS,EAATA,MAC/B,OACI,yBAAKd,GAAG,kBACJ,yBAAKA,GAAG,YAAYe,IAAKD,EAAOE,IAAI,M,MCHjC,SAASH,EAAT,GAA6D,IAAzCI,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,YAAaC,EAAO,EAAPA,IAKhE,OACI,yBAAKpB,GAAG,iBACJ,wBAAIA,GAAG,aAAaiB,GACpB,4BALE,cAAN,OAAqB,IAAII,KAKLF,GALgBG,uBAMhC,uBAAGtB,GAAG,mBAAmBkB,GACzB,uBACIK,KAAMH,EACNf,OAAO,SACPmB,IAAI,sBACJd,aAAW,yDACX,4BAAQV,GAAG,cAAX,e,MCbD,SAASyB,EAAT,GAMX,IALAX,EAKD,EALCA,MACAG,EAID,EAJCA,MACAE,EAGD,EAHCA,YACAD,EAED,EAFCA,YACAE,EACD,EADCA,IAEA,OACI,yBAAKpB,GAAG,iBACJ,kBAAC,EAAD,CAAWc,MAAOA,IAClB,kBAAC,EAAD,CACIG,MAAOA,EACPE,YAAaA,EACbD,YAAaA,EACbE,IAAKA,K,yyMCuBNM,MApCf,WAEI,MAAsCC,qBAAtC,mBAAKC,EAAL,KAAmBC,EAAnB,KAFW,4CAMX,WAAgCC,GAAhC,0EACwB,KAAhBA,EADR,yCAEeC,MAAM,yBAFrB,uBAKyBC,IAAMC,IAAN,2CACmBH,EADnB,iCACuDI,qCANhF,OAKQC,EALR,OAQIN,EAAgBM,EAASC,KAAKC,UARlC,4CANW,sBAiBX,OACI,6BACI,gCACI,kBAAC,EAAD,CAAYtC,iBApBb,+CAsBH,0BAAMC,GAAG,iBAGD4B,EACMA,EAAaU,KAAI,SAACC,EAASC,GACvB,OAAO,kBAAC,EAAD,eAAeC,IAAKD,GAAWD,OAE1C,QCvBNG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.382ab60c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\nexport default function SearchForm({ fetchNewsApiData }) {\r\n    /* \r\n    This function handles the form's submit event. \r\n    It pulls the search term and sortType from the form data and passes it to \r\n    the fetchNewsApiData function which lives in App.js. \r\n     */\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        let searchTerm = event.target[0].value;\r\n        fetchNewsApiData(searchTerm);\r\n    }\r\n\r\n    return (\r\n        <div id='searchContainer'>\r\n            <form id='formContainer' onSubmit={handleSubmit}>\r\n                <input\r\n                    className='searchInput'\r\n                    id='searchBar'\r\n                    type='text'\r\n                    name='searchBar'\r\n                    aria-label='Search Bar'\r\n                    placeholder='Type Some Keywords'></input>\r\n\r\n                <input\r\n                    id='searchButton'\r\n                    aria-label='Search Button'\r\n                    type='Submit'\r\n                    defaultValue='Search'></input>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./CardImage.css\";\r\n\r\nexport default function CardText({ image }) {\r\n    return (\r\n        <div id='imageContainer'>\r\n            <img id='cardImage' src={image} alt=''></img>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport \"./CardText.css\";\r\n\r\nexport default function CardText({ title, description, publishedAt, url }) {\r\n    // Formatting the date coming from the API so it's easily read by the user\r\n    function formatDate(date) {\r\n        return `Published: ${new Date(date).toLocaleDateString()}`;\r\n    }\r\n    return (\r\n        <div id='textContainer'>\r\n            <h3 id='cardTitle'>{title}</h3>\r\n            <h5>{formatDate(publishedAt)}</h5>\r\n            <p id='cardDescription'>{description}</p>\r\n            <a\r\n                href={url}\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                aria-label=\"Link to article's site of origin for the full article\">\r\n                <button id='cardButton'>Read More</button>\r\n            </a>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport CardImage from \"../CardImage/CardImage\";\r\nimport CardText from \"../CardText/CardText\";\r\nimport \"./CardContainer.css\";\r\n\r\nexport default function CardContainer({\r\n    image,\r\n    title,\r\n    publishedAt,\r\n    description,\r\n    url,\r\n}) {\r\n    return (\r\n        <div id='cardContainer'>\r\n            <CardImage image={image} />\r\n            <CardText\r\n                title={title}\r\n                publishedAt={publishedAt}\r\n                description={description}\r\n                url={url}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport SearchForm from \"./components/SearchForm/SearchForm\";\r\nimport CardContainer from \"./components/CardContainer/CardContainer\";\r\n\r\nfunction App() {\r\n    // Defines a new state variable called newsArticles to hold the data from the NewsAPI\r\n    let [newsArticles, setNewsArticles] = useState();\r\n\r\n    // Takes in two parameters which are passed in from the form in SearchForm.js\r\n    // Fetches the NewsAPI and sets the data in state\r\n    async function fetchNewsApiData(searchQuery) {\r\n        if (searchQuery === \"\") {\r\n            return alert(\"Search Term Required\");\r\n        }\r\n\r\n        let newsData = await axios.get(\r\n            `https://gnews.io/api/v3/search?q=${searchQuery}&image=required&token=${process.env.REACT_APP_NEWS_API_KEY}`\r\n        );\r\n        setNewsArticles(newsData.data.articles);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <SearchForm fetchNewsApiData={fetchNewsApiData} />\r\n            </header>\r\n            <main id='bodyContainer'>\r\n                {\r\n                    // If there are articles in state then map over them and return a Card for each one\r\n                    newsArticles\r\n                        ? newsArticles.map((article, index) => {\r\n                              return <CardContainer key={index} {...article} />;\r\n                          })\r\n                        : null\r\n                }\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}